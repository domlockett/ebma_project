data <- congress_turnover
mean(data$days[data$president=='Reagan'], na.rm=T)
mean(data$days[data$president=='Reagan'], na.rm=T)
data$days
data <- cabinet_turnover
mean(data$days[data$president=='Reagan'], na.rm=T)
mean(data$days[data$president=='Reagan'], na.rm=T)/mean(data$days[data$president=='Reagan'], na.rm=T)
mean(data$days[data$president=='Reagan'], na.rm=T)/2922
congress_stats <- function(stats){
if(stats == 'state'){
for(i in 1:50){
a<-round(mean(subset(congress_age$age, congress_age$state == unique(congress_age$state[i]))), digits =1)
print(paste(a, unique(congress_age$state[i]), sep= " "))}
}else if(stats =="congress"){
for(i in 1:34){
a<-round(mean(subset(congress_age$age, congress_age$congress == unique(congress_age$congress)[i])), digits =1)
print(paste(a, unique(congress_age$congress)[i], sep= " "))}
}}
congress_stats('state')
congress_stats('congress')
average.days <- function(administration){
if(administration == 'Reagan'){
mean(cabinet_turnover$days[cabinet_turnover$president=='Reagan'], na.rm=T)/2922
}else if(administration == 'Carter'){
mean(cabinet_turnover$days[cabinet_turnover$president=='Carter'], na.rm=T)/1461
}else if(administration == 'Bush 41'){
mean(cabinet_turnover$days[cabinet_turnover$president=='Bush 41'], na.rm=T)/1461
}else if(administration == 'Clinton'){
mean(cabinet_turnover$days[cabinet_turnover$president=='Clinton'], na.rm=T)/2922
}else if(administration == 'Bush 43'){
mean(cabinet_turnover$days[cabinet_turnover$president=='Bush 43'], na.rm=T)/2922
}else if(administration == 'Obama'){
mean(cabinet_turnover$days[cabinet_turnover$president=='Obama'], na.rm=T)/2922
}else if(administration == 'Trump'){
mean(cabinet_turnover$days[cabinet_turnover$president=='Trump'], na.rm=T)/1105
}
}
average.days('Reagan')
average.days('Trump')
gss <- read.csv('http://politicaldatascience.com/PDS/Problem%20Sets/Problem%20Set%202/GSS-data.csv. ')
gss <- read.csv('http://politicaldatascience.com/PDS/Problem%20Sets/Problem%20Set%202/GSS-data.csv')
vote.choice <- function(x){
if((x =="Trump")){
cat(sum(gss$pres16=="Trump"), "voted for Donald Trump")
}else if(x =="Clinton"){
cat(sum(gss$pres16=="Clinton"), "voted for Hilary Clinton")
}else if(x =="Other") {cat(sum(gss$pres16!= "Clinton"&gss$pres16 != "Trump"),
"did not report voting for either candidant")
}else if(x!= "Clinton" & x!= "Trump" & x!= "Other"){
print("Please enter either 'Trump' 'Clinton' or
'Other' into the function to return valid response")
}
}
vote.choice('Trump')
vote.choice('Clinton')
vote.choice('Other')
vote.choice('but')
install.packages("microbenchmark")
webData<-url("http://pages.wustl.edu/montgomery/incumbents2.txt")
OOS <- read.table(webData)
summary(OOS)
by.var.lm<-function(by.var, formula, data, coef.num){
output.vector<-NULL; print("one")
for (i in unique(by.var)){
print(i) # I can see where I get to in the loop
output.vector[which(unique(by.var) == i)]<-
lm(formula, data=data[by.var == i,])$coefficients[coef.num]
}
print('got out of loop')
return(output.vector)
}
plot(by.var.lm(year, voteshare~inparty, OOS, 2), type="l")
traceback()
debug(by.var.lm)
webData<-url("http://pages.wustl.edu/montgomery/incumbents2.txt")
OOS <- read.table(webData)
summary(OOS)
by.var.lm<-function(by.var, formula, data, coef.num){
output.vector<-NULL; print("one")
for (i in unique(by.var)){
print(i) # I can see where I get to in the loop
output.vector[which(unique(by.var) == i)]<-
lm(formula, data=data[by.var == i,])$coefficients[coef.num]
}
print('got out of loop')
return(output.vector)
}
plot(by.var.lm(year, voteshare~inparty, OOS, 2), type="l")
debug(by.var.lm
)
by.var.lm(year, voteshare~inparty, OOS, 2)
coef.num
browser()
browser()
coef.num
undebug(by.var.lm)
browser()
coef.num
install.package("tidyverse")
install.package("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages(c("DeclareDesign", "fabricatr", "randomizr", "estimatr", "DesignLibrary"))
library(pwr)
pwr.2p2n.test(h = , n1 = 500, n2 = 500, sig.level = 0.05)
pwr.2p2n.test(h = , n1 = 500, n2 = 500, sig.level = 0.05, power =.8)
cohen.ES(test = "t", size = "medium")
pwr.t.test(n = 1000, d = 0.5, sig.level = 0.05)
pwr.t.test(n = 1000, d = c(.025,0.5,.75), sig.level = 0.05)
pwr.t.test(n = 1000, d = , sig.level = c(.001,.01,0.05), power =.8)
pwr.t.test(n = 1000, d = , sig.level = (.001), power =.8)
pwr.t.test(n = 1000, d = , sig.level = (.001), power =.8)
pwr.t.test(n = 1000, d = , sig.level = (.01), power =.8)
pwr.t.test(n = 1000, d = , sig.level = (.05), power =.8)
seq(.001:.05, .025)
seq(.0001:.05, .0025)
seq(.0001:.05, by=.0025)
seq(.0001:.05, by=.025)
seq(.0001:.05, by=.05)
p.out <-as.data.frame(cbind(seq(.0001:.05, by=.05), NA)
)
p.out
pwr.t.test(n = 1000, d = , sig.level = (.001), power =.8)
pwr.t.test(n = 1000, d = , sig.level = (.001), power =.8)[2]
for(i in 1:length(seq(.0001:.05, by=.05))){
p.out[i,2] <- pwr.t.test(n = 1000, d = , sig.level = p.out[i,1], power =.8)
}
warnings()
p.out <-as.data.frame(cbind(seq(.0001:.05, by=.05), NA))
p.out
for(i in 1:length(seq(.0001:.05, by=.05))){
p.out[i,2] <- pwr.t.test(n = 1000, d = , sig.level = p.out[i,1], power =.8)[2]
}
p.out
p.out <-as.data.frame(cbind(seq(.0001:.05, by=.05), NA))
p.out
p.out <-as.data.frame(cbind(seq(.0001:.05, by=.005), NA))
cohen.ES(test = "t", size = "medium")
p.out
p.out <-as.data.frame(cbind(seq(.05:.0001, by=.005), NA))
p.out
p.out <-as.data.frame(cbind(seq(.05:.0001, by=.0005), NA))
p.out
?seq
p.out <-as.data.frame(cbind(seq(.05,.0001, by=.0005), NA))
p.out <-as.data.frame(cbind(seq(.0001,.05, by=.005), NA))
p.out
p.out <-as.data.frame(cbind(seq(.0001,.05, by=.0025), NA))
p.out
for(i in 1:length(seq(.0001:.05, by=.05))){
p.out[i,2] <- pwr.t.test(n = 1000, d = , sig.level = p.out[i,1], power =.8)[2]
}
p.out
plot(p.out)
t(p.out)
rev(p.out)
plot(rev(p.out))
p,out <- rev(p.out)
colnames(p.out) <- c("Effect Size", "P-Value")
plot(p.out)
p.out <- rev(p.out)
colnames(p.out) <- c("Effect Size", "P-Value")
plot(p.out)
plot(p.out, xlab= c(.1, .25))
plot(p.out, xlim= c(.1, .25))
plot(p.out, xlim= c(.13, .25))
plot(p.out, xlim= c(.125, .25))
plot(p.out, xlim= seq(.125, .25, by = .025))
plot(p.out, xlim= seq(.125, .25, by = .01))
seq(.125, .25, by = .01)
plot(p.out, xlim= c(.125, .25, by = .01))
plot(p.out, xlim= c(.125, .25))
plot(p.out, xlim= c(.125, .25), type ="line")
plot(p.out, xlim= c(.125, .22), type ="line")
plot(p.out, xlim= c(.125, .22), type ="line", title = "Significance by Effect Size given Fixed Sample")
plot(p.out, xlim= c(.125, .22), type ="line", main = "Significance by Effect Size given Fixed Sample")
?plot
plot(p.out, xlim= c(.125, .22), type ="b", main = "Significance by Effect Size given Fixed Sample", )
p.out
p <- rev(p.out[,1])
p
p.out <- cbind(rev(p.out[,1]), rev(p.out[,2])
)
p.out
colnames(p.out) <- c("Effect Size", "P-Value")
plot(p.out, xlim= c(.125, .22), type ="b", main = "Significance by Effect Size given Fixed Sample", )
plot(p.out, xlim= c(.125, .22), type ="b", main = "Significance by Effect Size given Fixed Sample" )
p.out
p.out <- as.data.frame(p.out)
p.out
plot(p.out, xlim= c(.125, .22), type ="b", main = "Significance by Effect Size given Fixed Sample" )
plot(p.out, xlim= c(.125, .22), type ="b", main = "Significance by Effect Size given Fixed Sample" )
plot(p.out, xlim= c(.125, .22), type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aqua" )
plot(p.out, xlim= c(.125, .22), type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4" )
plot(p.out, xlim= c(.125, .22), type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
plot(p.out, xlim= c(.11, .212), type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
plot(p.out, xlim= c(.12, .212), type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
plot(p.out, axes=F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
plot(p.out, xlim= c(seq(.12, .212, by = .025)), type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
source('~/.active-rstudio-document', echo=TRUE)
plot(p.out,axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(labels=NA,side=1,tck=-0.015,at=c(seq(from=0,to=.05,by=.01))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(labels=NA,side=1,tck=-0.015,at=c( xlim= c(seq(.12, .212, by = .025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(labels=NA,side=1,tck=0.015,at=c( xlim= c(seq(.12, .212, by = .025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(labels=NA,side=1,tck=0.12,at=c( xlim= c(seq(.12, .212, by = .025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(labels=NA,side=1,tck=0.012,at=c( xlim= c(seq(.12, .212, by = .025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
plot(p.out,axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(labels=NA,side=1,tck=0.012,at=c( xlim= c(seq(.12, .212, by = .025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(side=1,tck=0.012,at=c( xlim= c(seq(.12, .212, by = .025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(side=1,tck=0.012,at=c( xlim= c(seq(.12, .212, by = .0025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(side=1,tck=0.012,at=c( xlim= c(seq(.12, .22, by = .0025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(side=1,tck=0.012,at=c( xlim= c(seq(.12, .22, by = .025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
colnames(p.out) <- c("Effect Size", "P-Value")
plot(p.out,axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(side=1,tck=0.012,at=c( xlim= c(seq(.12, .22, by = .025)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(side=1,tck=0.012,at=c( xlim= c(seq(.12, .22, by = .01)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
plot(p.out,axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(side=1,tck=0.012,at=c( xlim= c(seq(.12, .22, by = .01)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
plot(p.out,axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(side=1,tck=0.012,at=c( xlim= c(seq(.12, .225, by = .01)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
plot(p.out,axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(side=1,tck=0.012,at=c( xlim= c(seq(.12, .229, by = .01)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
plot(p.out,axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(side=1,tck=-0.015,at=c( xlim= c(seq(.12, .229, by = .01)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
plot(p.out,x.axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(side=1,tck=-0.015,at=c( xlim= c(seq(.12, .229, by = .01)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
p.out <- rev(p.out)
p.out
plot(p.out,x.axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(side=1,tck=-0.015,at=c( xlim= c(seq(.12, .229, by = .01)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
axis(side=2,tck=-0.015,at=c( ylim= c(seq(.12, .229, by = .01)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
plot(p.out,y.axes =F, type ="b", main = "Significance by Effect Size given Fixed Sample", col = "aquamarine4", lwd=2 )
axis(side=2,tck=-0.015,at=c( ylim= c(seq(.12, .229, by = .01)))) # labels = NA prevents the creation of the numbers and tick marks, tck is how long the tick mark is.
load("C:/Users/dl0ck/Dropbox/EBMA_experiments/Replication Data/Replication Data/HetExperimentPreds.RData")
setwd("C:/Users/dl0ck/Dropbox/EBMA_experiments/Replication Data/Replication Data")
load(Experiment1.RData)
load(Het_Experiment.RData)
load(Het_Experiment)
load(Het_Experiment.RData)
loadData(Het_Experiment.RData)
load("C:/Users/dl0ck/Dropbox/EBMA_experiments/Replication Data/Replication Data/Het_Experiment.RData")
len<- length
disc_sp<- disc_den<- cont_sp<- cont_den<- list()
for(z in 1:5){
out<- 'test_udd_'
new<- paste(paste(out, z, sep=''), '.RData', sep='')
load(new)
disc_den[[z]]<- output
}
for(z in 1:5){
out<- 'test_uds_'
new<- paste(paste(out, z, sep=''), '.RData', sep='')
load(new)
disc_sp[[z]]<- output
}
for(z in 1:5){
out<- 'test_ucd_'
new<- paste(paste(out, z, sep=''), '.RData', sep='')
load(new)
cont_den[[z]]<- output
}
for(z in 1:5){
out<- 'test_ucs_'
new<- paste(paste(out, z, sep=''), '.RData', sep='')
load(new)
cont_sp[[z]]<- output
}
mse_udd<- mse_uds<- mse_ucd<- mse_ucs<- matrix(NA, nrow = 5, ncol = 11)
calc_mse<- function(list){
mses<- matrix(NA, nrow = len(list), ncol = 11)
for(z in 1:len(list)){
mses[z,]<- list[[z]]$mse
}
return(mses)
}
mse_udd<- calc_mse(disc_den)
mse_uds<- calc_mse(disc_sp)
mse_ucd<- calc_mse(cont_den)
mse_ucs<- calc_mse(cont_sp)
##creating the table for the simulations
##coming up with the relative scores
rel_udd<- rel_uds<- rel_ucd<- rel_ucs<- matrix(NA, nrow = 5, ncol = 10)
for(z in 1:5){
rel_udd[z,]<- mse_udd[z,-10]/mse_udd[z,10]
rel_uds[z,]<- mse_uds[z,-10]/mse_uds[z,10]
rel_ucd[z,]<- mse_ucd[z,-10]/mse_ucd[z,10]
rel_ucs[z,]<- mse_ucs[z,-10]/mse_ucs[z,10]
}
mean_mse_udd<- apply(mse_udd, 2, mean)
mean_mse_uds<- apply(mse_uds, 2, mean)
mean_mse_ucd<- apply(mse_ucd, 2, mean)
mean_mse_ucs<- apply(mse_ucs, 2, mean)
rel_mean_mse_udd<- mean_mse_udd[-10]/mean_mse_udd[10]
rel_mean_mse_uds<- mean_mse_uds[-10]/mean_mse_uds[10]
rel_mean_mse_ucd<- mean_mse_ucd[-10]/mean_mse_ucd[10]
rel_mean_mse_ucs<- mean_mse_ucs[-10]/mean_mse_ucs[10]
mean_mse<- rbind(mean_mse_udd, mean_mse_uds, mean_mse_ucd, mean_mse_ucs)
overall_mean<- apply(mean_mse, 2, mean)
rel_overall_mean<- overall_mean[-10]/overall_mean[10]
names<- c('LASSO', 'Elastic Net 0.5', 'Elastic Net 0.25', 'Find It', 'Bayesian GLM','BART', 'Random Forest', 'KRLS', 'SVM-SMO', 'Weighted Ensemble',  'Naive Average')
table.func<- function(vecs, names){
for(z in 1:nrow(vecs)){
start<- paste(names[z], round(vecs[z,1],2),  sep='&')
for(j in 2:ncol(vecs)){
start<- paste(start, round(vecs[z,j],2), sep='&')
}
start<- paste(start, '\\\\', sep='')
cat(start, '\n')
}
}
results<- cbind(rel_mean_mse_uds,  rel_mean_mse_ucs, rel_mean_mse_udd, rel_mean_mse_ucd, rel_overall_mean)
##for the main table
table.func(results, names)
table.func(t(mse_uds[,]), names)
table.func(t(mse_ucs[,]), names)
table.func(t(mse_udd[,]), names)
table.func(t(mse_ucd[,]), names)
table.func(t(mse_udd[,-10]), names)
avg_weight_uds<- avg_weight_ucs<- avg_weight_udd<- avg_weight_ucd<- matrix(NA, nrow = 5, ncol = 9)
for(z in 1:5){
avg_weight_uds[z,]<- disc_sp[[z]]$weight
avg_weight_udd[z,]<- disc_den[[z]]$weight
avg_weight_ucs[z,]<- cont_sp[[z]]$weight
avg_weight_ucd[z,]<- cont_den[[z]]$weight
}
mses<- c(mse_uds[,1:9], mse_udd[,1:9], mse_ucs[,1:9], mse_ucd[,1:9])
weights<- c(avg_weight_uds, avg_weight_udd, avg_weight_ucs, avg_weight_ucd)
par(cex.lab = 2)
par(mar = c(6, 5, 3, 2))
plot(c(avg_weight_uds, avg_weight_udd, avg_weight_ucs, avg_weight_ucd)~c(mse_uds[,1:9], mse_udd[,1:9], mse_ucs[,1:9], mse_ucd[,1:9]), xlab = 'Root Mean Squared Error', ylab = 'Weight', xlim=c(0, 0.5), pch = 20, col=gray(0.5))
#lines(lowess( c(avg_weight_uds, avg_weight_udd, avg_weight_ucs, avg_weight_ucd)~c(mse_uds[,1:9], mse_udd[,1:9], mse_ucs[,1:9], mse_ucd[,1:9]), iter = 0))
store<- loess(weights~mses, span = 0.75)
xs<- sort(unique(mses))[1:181]
ys<- predict(store, newdata =xs)
ys[which(ys<0)]<- 0
lines(ys~xs, lwd = 3)
dev.copy(device=pdf, file='SimCorr.pdf', height = 6 , width = 6)
dev.off()
load('Het_Experiment.RData')
names(svdat)[23:51] = c("preq1", "preq2", "preq3",
"nextc", "contr", "nextt", "treat",
"approval", "therm", "fiscRespbl",
"bringMoneyEff", "passLegEff",
"secReqMC", "likGetM", "daysGetM", "break",
"gender", "race", "byear", "ntvEnglish",
"ideo3", "voted", "pid3", "pidCloser", "educ",
"inc", "finalinst", "howLong", "comments")
approv = agrep("I pay attention", max.distance=.3,
svdat$comments)
approv2 = agrep("I PAY ATTENTION", max.distance=.3,
svdat$comments)
approv = c(approv,approv2)
#svdat$comments[-approv]
svdat = svdat[approv,]
svdat$cond.type[which(svdat$contr==1)] = "control"
svdat$cond.type = relevel(factor(svdat$cond.type), ref="control")
svdat$cond.money[which(svdat$contr==1)] = "control"
svdat$cond.money = relevel(factor(svdat$cond.money), ref="control")
svdat$cond.stage[which(svdat$contr==1)] = "control"
svdat$cond.stage = relevel(factor(svdat$cond.stage), ref="control")
svdat$cond.party[which(svdat$contr==1)] = "control"
svdat$cond.party = relevel(factor(svdat$cond.party), ref="control")
svdat$cond.alongWith[which(svdat$contr==1)] = "control"
svdat$cond.alongWith = relevel(factor(svdat$cond.alongWith), ref="control")
levels(svdat$cond.alongWith) = c("control", "alone", "w/ Dem", "w/ Rep")
# Fix up pid3
svdat$pid3l = factor(c("Dem", "Rep", "Ind/Oth", "Ind/Oth")[svdat$pid3])
svdat$pid3l = relevel(svdat$pid3l, ref="Ind/Oth")
with<- rep(0, nrow(svdat))
with[grep('w/', as.character(svdat$cond.along))]<- 1
cons<- ifelse(svdat$ideo3<3, 1, 0)
lib<- ifelse(svdat$ideo3==4|svdat$ideo3==5, 1, 0)
##setting up the conditions
types<- sort(unique(as.character(svdat$cond.type)))
type.num<- match(svdat$cond.type, types)
number<- c('control', '$20 million', '$50 thousand')
amount.num<- match(svdat$cond.money, number)
request<- c('control', 'requested', 'secured', 'will request')
stage.num<- match(svdat$cond.stage, request)
party<- c('control', 'a Republican', 'a Democrat')
party.num<- match(svdat$cond.party, party)
along<- c('control', 'alone', 'w/ Rep', 'w/ Dem')
along.num<- match(svdat$cond.alongWith, along)
type_labs<- c('Planned\nParenthood', 'Parks', 'Gun Range', 'Fire\nDepartment', 'Police', 'Roads')
money_labs<- c('$50 thousand', '$50 million')
stage_labs<- c('Will Request', 'Request', 'Secured')
along_labs<- c('Alone', 'w/ Republican', 'w/Democrat')
party_labs<- c('Republican', 'Democrat')
make.eff<- function(dep, indep){
part1<- lm(dep~indep)
coefs<- part1$coef[2:len(part1$coef)]
ses<- sqrt(diag(vcov(part1)))[2:len(part1$coef)]
out<- rbind(coefs, ses)
return(out)}
add.arrow<- function(eff, ys, labs){
mins<- c(eff[1,] - 1.96*eff[2,])
center<- eff[1,]
maxs<- c(eff[1,] + 1.96*eff[2,])
for(z in 1:len(ys)){
arrows(mins[z], ys[z], maxs[z], ys[z], len = 0 , lwd = 2)
points(center[z], ys[z], pch=20, cex = 1.25)
}
axis(2, c(ys[1]:ys[len(ys)]), labs)
}
par(mar = c(5, 7, 4, 2))
par(las = 1)
plot(c(0,1)~c(0,1), ylim=c(1, 16), xlim=c(-0.3, 0.6), xlab='Treatment Effect', ylab='', axes=F, frame.plot=F)
axis(1, c(-0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6))
axis(3, c(-0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6))
for(z in 1:16){
arrows(-1e10, z, 1e10, z, lty= 2, col=gray(0.8))
}
for(z in c(-0.4,-0.35,  -0.3, -0.25, -0.2,-0.15,  -0.1,-0.05, 0.05, 0.1,0.15,  0.2,0.25,  0.3,0.35, 0.4,0.45, 0.5, 0.55, 0.6)){
arrows(z, -1e10, z, 1e10, lty=2, col=gray(0.8))}
abline(v = 0, lwd=3)
approve_bi<- ifelse(svdat$approval<3, 1, 0)
start1<- make.eff(approve_bi, svdat$cond.type)
add.arrow(start1, c(1:6), type_labs)
start2<- make.eff(approve_bi, svdat$cond.money)
add.arrow(start2, c(7:8), c('$20 million','$50 thousand'))
start3<- make.eff(approve_bi, svdat$cond.stage)[,c(3, 1, 2)]
add.arrow(start3, c(9:11), c('Will Request', 'Request', 'Secured'))
start4<- make.eff(approve_bi, svdat$cond.alongWith)
add.arrow(start4, c(12:14), c('Alone', 'w/ Dem', 'w/ GOP'))
start5<- make.eff(approve_bi, svdat$cond.party)
add.arrow(start5, c(15:16), c('Democrat', 'Republican'))
dev.copy(device=pdf, file='MainEffects.pdf', height=8, width=6)
dev.off()
##now putting together the analysis of the first experiment
##building the first treatment matrix.
type.mat<- matrix(0, nrow = 1074, ncol=7)
colnames(type.mat)<- sort(unique(as.character(svdat$cond.type)))
for(z in 1:nrow(type.mat)){
type.mat[z,which(colnames(type.mat)==svdat$cond.type[z])]<- 1}
type.mat.final<- type.mat[,-1]
num.mat<- matrix(0, nrow=1074, ncol=3)
colnames(num.mat)<- number
for(z in 1:nrow(num.mat)){
num.mat[z,which(colnames(num.mat)==svdat$cond.money[z])]<- 1
}
num.mat.final<- num.mat[,-1]
stage.mat<- matrix(0, nrow=1074, ncol=4)
colnames(stage.mat)<- request
for(z in 1:nrow(stage.mat)){
stage.mat[z,which(colnames(stage.mat)==svdat$cond.stage[z])]<- 1
}
stage.mat.final<- stage.mat[,-1]
party.mat<- matrix(0, nrow=1074, ncol=3)
colnames(party.mat)<- party
for(z in 1:nrow(party.mat)){
party.mat[z, which(colnames(party.mat)==svdat$cond.party[z])]<- 1
}
party.mat.final<- party.mat[,-1]
along.mat<- matrix(0, nrow=1074, ncol=4)
colnames(along.mat)<- 	along
for(z in 1:nrow(along.mat)){
along.mat[z,which(colnames(along.mat)==svdat$cond.alongWith[z])]<- 1
}
along.mat.final<- along.mat[,-1]
##putting together the matrices
treat.mat<- cbind(type.mat.final, num.mat.final, stage.mat.final, party.mat.final, along.mat.final)
dem<- ifelse(svdat$pid3l=='Dem', 1, 0)
dem[which(is.na(dem))]<- 0
rep<- ifelse(svdat$pid3l=='Rep', 1, 0)
rep[which(is.na(rep))]<- 0
lib[which(is.na(lib))]<- 0
cons[which(is.na(cons))]<- 0
covs<- cbind(dem, rep, lib, cons)
colnames(covs)<- c('Dem', 'Rep', 'Lib', 'Cons')
##alright, now putting this together---putting together the interactions
##we want
type.mat.final<- data.frame(type.mat.final)
colnames(type.mat.final)<- c('PlanParent', 'Parks', 'Gun_Range', 'Fire', 'Police', 'Roads')
num.mat.final<- data.frame(num.mat.final)
colnames(num.mat.final)<- c('mil_20', 'thou_50')
stage.mat.final<- data.frame(stage.mat.final)
colnames(stage.mat.final)<- c('request', 'secure', 'will')
party.mat.final<- data.frame(party.mat.final)
colnames(party.mat.final)<- c('rep_rep', 'dem_rep')
along.mat.final<- data.frame(along.mat.final)
colnames(along.mat.final)<- c('alone', 'w_rep', 'w_dem')
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1], along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2], num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
type.short<- c('PlanParent', 'Parks', 'Gun_Range', 'Fire', 'Police', 'Roads')
num.short<- c('mil_20', 'thou_50')
stage.short<- c('request', 'secure', 'will')
party.short<- c('rep_rep', 'dem_rep')
along.short<- c('alone', 'w_rep', 'w_dem')
colnames(treats)[1:12]<- c(type.short, num.short[1], stage.short[1:2], party.short[1], along.short[1:2])
colnames(treats)[13:17]<- paste(type.short[1:5], num.short[1], sep='_x_')
colnames(treats)[18:22]<- paste(type.short[1:5], stage.short[1], sep='_x_')
colnames(treats)[23:27]<- paste(type.short[1:5], stage.short[2], sep='_x_')
colnames(treats)[28:32]<- paste(type.short[1:5], party.short[1], sep='_x_')
colnames(treats)[33:37]<- paste(type.short[1:5], along.short[1], sep='_x_')
colnames(treats)[38:42]<- paste(type.short[1:5], along.short[2], sep='_x_')
colnames(treats)[43]<- paste(num.short[1], stage.short[1], sep='_x_')
colnames(treats)[44]<- paste(num.short[1], stage.short[2], sep='_x_')
colnames(treats)[45]<- paste(num.short[1], party.short[1], sep='_x_')
colnames(treats)[46]<- paste(num.short[1], along.short[1], sep='_x_')
colnames(treats)[47]<- paste(num.short[1], along.short[2], sep='_x_')
colnames(treats)[48:49]<- paste(stage.short[1:2], party.short[1], sep='_x_')
colnames(treats)[50:51]<- paste(stage.short[1:2], along.short[1], sep='_x_')
colnames(treats)[52:53]<- paste(stage.short[1:2], along.short[2], sep='_x_')
colnames(treats)[54]<- paste(party.short[1], along.short[1], sep='_x_')
colnames(treats)[55]<- paste(party.short[2], along.short[2], sep='_x_')
##now sourcing the function
source('SLF_round2.R')
covs
##commented out because this takes a long time to run, fits the ensemble
part1<- supLearnFit(covs, treat_mat, approve_bi, 10, F)
treat_mat<- as.matrix(treats)
##commented out because this takes a long time to run, fits the ensemble
part1<- supLearnFit(covs, treat_mat, approve_bi, 10, F)
